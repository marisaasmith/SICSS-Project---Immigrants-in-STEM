pacman::p_load(
rvest,
readr,
here,
quanteda,
ggplot2,
tidyverse,
purrr,
dplyr,
tm,
RCurl
)
news_data <- read_csv(getURL("https://raw.githubusercontent.com/marisaasmith/SICSS-Project---Immigrants-in-STEM/main/news_data/STEM%20stories%20-%202015.csv"))
news_data$url[2]
news_data$url[1]
scrape <- function(x){
text <- tryCatch(read_html(x) %>%
html_nodes(css = 'p') %>%
html_text(trim = T) %>%
trimws() %>%
paste0(collapse = " "), error = function(e){NA})
return(text)
}
scrape(news_data$url[1])
pacman::p_load(
rvest,
readr,
here,
quanteda,
ggplot2,
tidyverse,
purrr,
dplyr,
tm,
RCurl
)
news_data <- read_csv(getURL("https://raw.githubusercontent.com/marisaasmith/SICSS-Project---Immigrants-in-STEM/main/news_data/STEM%20stories%20-%202015.csv"))
install.packages("httr")
install.packages("httr")
library(httr)
scrape <- function(x){
text <- tryCatch(read_html(x) %>%
html_nodes(css = 'p') %>%
html_text(trim = T) %>%
trimws() %>%
paste0(collapse = " "), error = function(e){NA})
return(text)
}
test <- news_data[1,]
test
test %>%
mutate(text_raw = map(url, scrape) %>%
map_chr(1L))
)
pacman::p_load(
rvest,
readr,
here,
quanteda,
ggplot2,
tidyverse,
purrr,
dplyr,
tm,
RCurl,
httr
)
test %>%
mutate(text_raw = map(url, scrape) %>%
map_chr(1L))
library(tictoc)
library(future.apply) # used for parallization
library(furrr)
pacman::p_load(
rvest,
readr,
here,
quanteda,
ggplot2,
tidyverse,
purrr,
dplyr,
tm,
RCurl,
httr,
R.utils
)
news_data <- read_csv(getURL("https://raw.githubusercontent.com/marisaasmith/SICSS-Project---Immigrants-in-STEM/main/news_data/STEM%20stories%20-%202015.csv"))
scrape <- function(x){
text <- tryCatch(read_html(x) %>%
html_nodes(css = 'p') %>%
html_text(trim = T) %>%
trimws() %>%
paste0(collapse = " "), error = function(e){NA})
return(text)
}
scrape_wrapper <- function(x){
withTimeout(expr = scrape(x), timeout = 60)
}
availableCores()
# This line does some setup for parallelizing
# the 'workers' argument decides how many cores to use
#     (your computer probably has somewhere between 4 and 12 cores)
# You can check how many cores you have using 'availableCores()'
# Currectly 'workers' is set to use all but 1 of your cores
# You can change workers to a smaller number (for example 4) if you are
#     doing other things on your computer at the same time and don't want to use all cores
24-15
# This line does some setup for parallelizing
# the 'workers' argument decides how many cores to use
#     (your computer probably has somewhere between 4 and 12 cores)
# You can check how many cores you have using 'availableCores()'
# Currectly 'workers' is set to use all but 1 of your cores
# You can change workers to a smaller number (for example 4) if you are
#     doing other things on your computer at the same time and don't want to use all cores
24-16
# This line does some setup for parallelizing
# the 'workers' argument decides how many cores to use
#     (your computer probably has somewhere between 4 and 12 cores)
# You can check how many cores you have using 'availableCores()'
# Currectly 'workers' is set to use all but 1 of your cores
# You can change workers to a smaller number (for example 4) if you are
#     doing other things on your computer at the same time and don't want to use all cores
24-12
plan(multisession, workers = (availableCores()-12), gc = TRUE)
